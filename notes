Project:
Create a management interface using Ruby/Sinatra http://www.sinatrarb.com and Bootstrap or Angular using provided JSON data.
Put all code into a local GIT repository, using regular feature/milestone commits, tags and branches.
Provide the GIT repo in a zip file.

The features of the interface should include:

An overview of the content
A detail view which provides alternate views, and details
Operations for 'publish', 'delete', and 'flag' (operations should call to your tech stack)
The tech stack should receive all operations but does not need to do anything with them
Extra points for putting the JSON data into a database and constructing the JSON document for delivery to the front end


+---------+
|         |
| angular |
|         |
+---------+
 ^  |  ^
 |  |  |
 |  V  |
+--------------+
|              |
| "tech stack" |
|              |
+--------------+

http status codes
CRUD

get params ?query=string
/ get -> get everything
/?id GET -> get a single resource
/publish POST -> Create new ; put -> update old based on uid
/flag PUT -> add boolean true to resource
/delete DELETE -> remove the resource from the database (OR! set a deleted flag, and remove from get results) (set a flag on model that signals this is deleted) (Also, all you have to send to server is the id of what you're deleting--then any subsequent get request would not be able to locate it, because the boolean flag is false) (So I should modify get requests to only get things with boolean flag set to true)

0) Figure out the layout/design of UI and the endpoints each button will hit. This will give insight into how I should interface with models on the server side. I can temporarily have json data lie in the client-side and simply have an Angular display.
1) Make UI with AngularJS (make it hit the endpoints as I want them to be) -- make the requests do the proper thing. get would ask for something, post and publish would send along, in the request body, the data to save.

2) Once, the UI is done, start implementing the actual requests, starting with GET.
3) Mock out endpoints and get server to respond with appropriate messages (e.g. 200 ok). 
4) Migrate data from content.json in Ruby app to MongoDB database.
