Sinatra Notes

REST architecture provides a convenient mechanism to move data between clients and servers. The Sinatra library can be used to implement the REST architecture very simply.

Sinatra
1) Simplicity (one file, HTTP verbs)
2) Flexibility (easy prototyping, built on top of Rack)
3) Lightweight
4) Unbiased (no MVC, ORM, framework, or templating system)
5) Increases Ruby proficiency

Domain-specific-language with the same routing verbs as HTTP: GET, POST, PUT, and DELETE.

Sinatra: there is little MVC, no ORM database wrapper, and routes and controllers are somewhat merged, but Sinatra does have many options for views. These things make Sinatra a great choice for small apps and APIs. Eventually an app will need to be upgraded to something like Rails.

The ability to mount Sinatra apps inside Rails 3 apps gives you the best of both worlds. Many people are embedding Sinatra apps inside Rails apps. This mimics the design of the Django framework, where an app consists of many smaller apps.

Why not use Rails to move data around?
Rails not only retrieves data, but it renders the view as well. This puts an extra load on the server, especially when the data is highly dynamic and cannot be cached. If the data continuously changes, it's better to let clients render their own view rather than force the server to re-render each time.